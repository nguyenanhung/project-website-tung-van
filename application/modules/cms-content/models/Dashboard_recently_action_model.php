<?php
defined('BASEPATH') OR exit('No direct script access allowed');
/**
 * Created by PhpStorm.
 * User: Tom
 * Date: 3/31/17
 * Time: 14:59
 */
require_once APPPATH . 'core/TD_VAS_Based_model.php';
class Dashboard_recently_action_model extends TD_VAS_Based_model
{
    public function __construct()
    {
        parent::__construct();
        $this->db                   = $this->load->database('default', TRUE, TRUE);
        $this->tableName            = 'recently_action';
        $this->tableUser          = 'users';
        $this->primary_key      = 'id';
        $this->field_user_id = 'user_id';
        $this->field_module = 'module';
        $this->field_controller   = 'controller';
        $this->field_action    = 'action';
        $this->field_params     = 'params';
        $this->field_created_at = 'created_at';
    }
    /**
     * @return close Database connection
     */
    public function close()
    {
        $this->db->close();
    }

    /**
     * Get Results
     */
    public function get_result($size = 5, $page = 0, $begin_date = '', $end_date = '', $user_id = null, $module = null, $controller = null, $action = null, $count_result = false, $random = false)
    {
        $this->db->select($this->tableName.'.id as id, user_id, module, controller, action, params, '.$this->tableName.'.created_at as created_at, '.$this->tableUser.'.username as username');
        $this->db->from($this->tableName);
        $this->db->join($this->tableUser, $this->tableUser.'.id = '. $this->tableName.'.user_id');
        // Filter Date
        if ($begin_date != '' && $end_date != '')
        {
            if ($begin_date == $end_date)
            {
                $this->db->like($this->tableName . '.' . $this->field_created_at, $begin_date);
            }
            else
            {
                $this->db->where($this->tableName . '.' . $this->field_created_at . $this->or_higher, $begin_date . $this->start_time);
                $this->db->where($this->tableName . '.' . $this->field_created_at . $this->or_smaller, $end_date . $this->end_time);
            }
        }
        // Filter $user_id
        if ($user_id)
        {
            $this->db->where($this->field_user_id, $user_id);
        }
        // Filter $module
        if ($module)
        {
            $this->db->where($this->field_module, $module);
        }
        // Filter $controller
        if ($controller)
        {
            $this->db->where($this->field_controller, $controller);
        }
        // Filter $action
        if ($action)
        {
            $this->db->where($this->field_action, $action);
        }
        /** @var Filter count result */
        if ($count_result === false)
        {
            // Limit Result
            self::_page_limit($size, $page);
            // Order Result
            if ($random === true)
            {
                $this->db->order_by($this->tableName . '.' . $this->primary_key, 'RANDOM');
            }
            else
            {
                $this->db->order_by($this->tableName . '.' . $this->primary_key, 'DESC');
            }
            // Genarate result
            return $this->db->get()->result();
        }
        else
        {
            return $this->db->count_all_results();
        }
    }
    public function get_result_distinct($field = null)
    {
        $this->db->distinct();
        $this->db->select($field);
        $this->db->from($this->tableName);
        return $this->db->get()->result();
    }
    public function get_info($value = '', $field = null, $array = false)
    {
        return parent::get_info($value, $field);
    }
    /**
     * Add item to Data
     *
     * @param array $data
     * @return mixed
     */
    public function add($data = array())
    {
        return parent::add($data);
    }
    /**
     * Update Data to Item
     *
     * @param string $id
     * @param array $data
     * @return mixed
     */
    public function update($id = '', $data = array())
    {
        return parent::update($id, $data); // TODO: Change the autogenerated stub
    }
    /**
     * Delete Item
     *
     * @param string $id
     * @return bool
     */
    public function delete($id = '')
    {
        return parent::delete($id); // TODO: Change the autogenerated stub
    }
}